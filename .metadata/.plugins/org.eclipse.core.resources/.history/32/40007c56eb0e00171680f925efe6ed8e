#pragma once

#include <math.h>
#include "MathTools.h"
#include "Sphere.h"

#include "ColorTools_GPU.h"
using namespace gpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class RayTracingMath
    {

	/*--------------------------------------*\
	|*		Constructor		*|
	 \*-------------------------------------*/

    public:

	__device__ RayTracingMath(Sphere* ptrDevTabSphere, int tabSphereLength)
	    {
	    this->ptrTabSphere = ptrDevTabSphere;
	    this->tabSphereLength = tabSphereLength;
	    }

	// constructeur copie automatique car pas pointeur dans VagueMath

	__device__
	       virtual ~RayTracingMath()
	    {
	    // rien
	    }

	/*--------------------------------------*\
	|*		Methodes		*|
	 \*-------------------------------------*/

    public:

	__device__
	void colorIJ(uchar4* ptrColor, int i, int j, float t)
	    {

	    float2 xySol;
	    xySol.x = j;
	    xySol.y = i;

	    int k = 0;
	    for(k = 0; k < tabSphereLength; k++)
		{
		Sphere sphereK = ptrTabSphere[k];
		float hCarre = sphereK.hCarre(xySol);

		// Remplace le IF
		// Si false => isEnDessous = 0
		// Si true  => isEnDessous = 1
		int isEnDessous = (int) sphereK.isEnDessous(hCarre);

		float dz = sphereK.dz(hCarre);
		float distance = sphereK.distance(dz) * isEnDessous;
		float brightness = sphereK.brightness(dz) * isEnDessous;
		float hue = (sphereK.getHueStart() + sphereK.hue(t)) * isEnDessous;
		ColorTools::HSB_TO_RVB(hue, 1, brightness, ptrColor);

		// Condition de sortie si une sphere est en-dessous
		k += tabSphereLength * isEnDessous;
		}
	    }

	/*--------------------------------------*\
	|*		Attributs		*|
	 \*-------------------------------------*/

    private:

	Sphere* ptrTabSphere;
	int tabSphereLength;

    };

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
