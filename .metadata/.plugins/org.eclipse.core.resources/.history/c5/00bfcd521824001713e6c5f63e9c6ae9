#include <iostream>

#include "MontecarloMultiGPU.h"
#include "Montecarlo.h"
#include "Device.h"
#include <curand_kernel.h>

using std::cout;
using std::endl;
/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

MontecarloMultiGPU::MontecarloMultiGPU(const Grid& grid, float m, long n) :
	 grid(grid), m(m), n(n)
    {
	this->piHat = 0;
    }

MontecarloMultiGPU::~MontecarloMultiGPU()
    {

    }

void MontecarloMultiGPU::run()
    {
	int nbDevice = Device::getDeviceCount();
	int nx = 0;

# pragma omp parallel for reduction(+ : sum)
	for(int deviceID = 0; deviceID < nbDevice; deviceID++)
	    {
		Device::setDevice(nbDevice);
		Montecarlo montecarlo (grid, m, n);
		montecarlo.run();
		nx = montecarlo.getNx();
	    }

	piHat = ((float)nx/(float)n) * (float)m;
    }

float MontecarloMultiGPU::getPiHat()
    {
	return piHat;
    }
/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

