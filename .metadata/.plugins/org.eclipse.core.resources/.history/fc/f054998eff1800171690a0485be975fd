#include "Indice1D.h"
#include "cudaTools.h"
#include "reductionADD.h"

#include <stdio.h>

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/


/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/


/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void slice(float* ptrDevGM, int nbSlice);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __device__ void reductionIntraThread(float* ptrDevTabValues, float* ptrDevGMFinal, int n, int nbSlice);
static __device__ void copyGMtoSM(float* ptrDevTab, float* ptrDevTabSM, int n)

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * output : void required !!
 */
__global__ void slice(float* ptrDevGM, int nbSlice)
    {
    __shared__ extern float ptrDevTabSM[];

    reductionIntraThread(ptrDevTabSM, ptrDevGM, nbSlice);

    __syncthread();

    reductionADD<float>(ptrDevTabSM, ptrDevGM)
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void reductionIntraThread(float* ptrDevTabSM, float* ptrDevGM, int nbSlice)
    {
    const int NB_THREAD = blockDim.x * gridDim.x;
    const int TID = threadIdx.x + (blockIdx.x * blockDim.x);
    const int TID_LOCAL = threadIdx.x;

    // Debug, facultatif (voir AddVector.cu)
//    if (TID == 0)
//	{
//	printf("Coucou from device tid = %d", TID); //required   Device::synchronize(); after the call of kernel
//	}

    float sumThread = 0;
    int s = TID;
    while (s < nbSlice)
	{

	s += NB_THREAD;
	}

    ptrDevTabSM[TID]
    }

__device__ float fpi(float x)
    {
    return 4.f / (1.f + x * x);
    }
/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

