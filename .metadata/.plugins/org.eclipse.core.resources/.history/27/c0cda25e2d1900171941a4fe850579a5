#include "Montecarlo.h"


/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

Montecarlo::Montecarlo(const Grid& grid, float* ptrPiHat, float m, long n) :
    ptrPiHat(ptrPiHat), m(m), n(n)
    {
	this->db = grid.db;
	this->dg = grid.dg;
	this->nbThreat = grid.threadCounts();
	this->sizeOctetGenerator = nbThreat * sizeof(curandState);
	this->sizeOctetSM = sizeof(float) * db.x * db.z * db.x;

	Device::malloc(&ptrDevPiHatGM, sizeOctet);
	Device::memclear(ptrDevPiHatGM, sizeOctet);

	Device::malloc(&tabDevGeneratorGM, sizeOctetGM);
	Device::memclear(tabDevGeneratorGM, sizeOctetGM);
    }

Montecarlo::~Montecarlo()
    {
    Device::free(ptrDevPiHatGM);
    Device::free(tabDevGeneratorGM);
    }


void Montecarlo::run()
    {
    int deviceID
    Device::lastCudaError("Montecarlo (before)"); // temp debug
    setup_kernel_rand<<<dg, db, sizeOctetSM>>>(tabDevGeneratorGM, deviceID);
    working_kernel<<dg,db, sizeOctetSM>>>()
    Device::lastCudaError("Montecarlo (after)"); // temp debug

    // Debug, facultatif (voir addVector_device.cu)
//     Device::synchronize(); // Temp,debug, only for printf in  GPU

    Device::memcpyDToH(ptrPiHat, ptrDevPiHatGM, sizeOctetGM); // barriere synchronisation implicite

    }
/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

