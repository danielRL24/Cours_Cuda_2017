#include "Indice1D.h"
#include "cudaTools.h"
#include <stdio.h>

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void histogramme(int* ptrDevTabData, int *ptrDevTabResult, int tabSize, int dataMax);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __device__ void reductionIntraThread(int *ptrDevTabData, int tabSize, int *tabSM);
static __device__ void reductionInterBlock(int* tabSM, int* ptrDevTabResult, int dataMax);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void histogramme(int* ptrDevTabData, int *ptrDevTabResult, int tabSize, int dataMax)
    {
    extern __shared__ int tabSM[];

    reductionIntraThread(ptrDevTabData, tabSize, tabSM);

    __syncthreads();

    reductionInterBlock(tabSM, ptrDevTabResult, dataMax);
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void reductionIntraThread(int *ptrDevTabData, int tabSize, int *tabSM)
    {
    const int NB_THREAD = Indice1D::nbThread();
    const int TID = Indice1D::tid();

    int s = TID;

    while (s < tabSize)
	{
	atomicAdd(&tabSM[ptrDevTabData[s]], 1);
	s += NB_THREAD;
	}
    }

__device__ void reductionInterBlock(int* tabSM, int* ptrDevTabResult, int dataMax)
    {
    const int NB_THREAD_LOCAL = Indice1D::nbThreadBlock();
    const int TID_LOCAL = Indice1D::tidLocal();

    int s = TID_LOCAL;

    while (s < dataMax)
	{
	atomicAdd(&ptrDevTabResult[s], tabSM[s]);
	s += NB_THREAD_LOCAL;
	}

    if(Indice1D::tidLocal() == 0)
	{
	for(int i=0; i < dataMax; i++)
	    {
	    atomicAdd(&ptrDevTabResult[i], tabSM[i]);
	    }
	}

    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

