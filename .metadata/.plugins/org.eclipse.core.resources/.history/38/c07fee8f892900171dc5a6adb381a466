#include <iostream>

#include "Device.h"
#include "Histogramme.h"
#include "DataCreator.h"

using std::cout;
using std::endl;

const int dataMax = 256;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Import			*|
 \*-------------------------------------*/

extern __global__ void histogram(int* ptrTabData, int tabSize, int *ptrDevResult);

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

Histogramme::Histogramme(int tabSize) :
		tabSize(tabSize)
{
	this->ptrTabResult = new int[SIZE_TAB_SM];
	this->ptrTabData = new int[tabSize];

	DataCreator dataCreator(dataMax);
	int* ptrData = dataCreator.getTabData();
	int n = dataCreator.getLenght();

	this->sizeOctetSM = sizeof(int) * dataMax;
	this->sizeOctetGM = sizeof(int) * dataMax;

	Device::malloc(&ptrDevNx, sizeof(long));
	Device::memclear(ptrDevNx, sizeof(long));

	// Allocation-party
	HANDLE_ERROR(cudaMalloc(&ptrTabOut, sizeOctetResult));
	HANDLE_ERROR(cudaMalloc(&ptrTabIn, sizeOctetData));

	// Memory set party
	HANDLE_ERROR(cudaMemset(ptrTabOut, 0, sizeOctetResult));
	HANDLE_ERROR(
			cudaMemcpy(ptrTabIn, ptrTabData, sizeOctetData,
					cudaMemcpyHostToDevice));

	Device::lastCudaError("histogramme.cu constructor"); // temp debug

	// Grid

	this->dg = dim3(16, 2, 1);
	this->db = dim3(256, 1, 1); 	// Produit doit Ãªtre ^2

	Device::gridHeuristic(dg, db); // optionnel

}

Histogramme::~Histogramme(void)
{
	Device::lastCudaError("histogram.cu destructor begin"); // temp debug
	HANDLE_ERROR(cudaFree(ptrTabOut));
	Device::lastCudaError("histogram.cu destructor end"); // temp debug
}

int* Histogramme::run()
{
	Device::lastCudaError("histogram run begin");
	histogram<<<dg,db,sizeOctetResult>>>(ptrTabIn, tabSize, ptrTabOut); // asynchrone
	Device::lastCudaError("histogram run end");

	HANDLE_ERROR(cudaMemcpy(ptrTabResult, ptrTabOut, sizeOctetResult ,cudaMemcpyDeviceToHost));

	return ptrTabResult;
}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

