#include "Indice2D.h"
#include "cudaTools.h"
#include "Device.h"

#include "IndiceTools_GPU.h"

#include "DomaineMath_GPU.h"
#include "MandelbrotMath.h"
using namespace gpu;

// Attention : 	Choix du nom est impotant!
//		VagueDevice.cu et non Vague.cu
// 		Dans ce dernier cas, probl�me de linkage, car le nom du .cu est le meme que le nom d'un .cpp (host)
//		On a donc ajouter Device (ou n'importequoi) pour que les noms soient diff�rents!

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void mandelbrot(uchar4* ptrDevPixels, uint w, uint h, float t, DomaineMath domaineMath);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void workPixel(uchar4* ptrColorIJ,int i, int j, float t, const DomaineMath& domaineMath,MandelbrotMath* ptrMandelbrotMath);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void mandelbrot(uchar4* ptrDevPixels, uint w, uint h, float t, DomaineMath domaineMath)
    {
    MandelbrotMath mandelbrotMath(t); // ici pour preparer cuda

    const int WH = w * h;
    const int NB_THREAD = Indice2D::nbThread(); // dans region parallel
    const int TID = Indice2D::tid();

    int i;
    int j;

    int s = TID; // in [0,...
    while (s < WH)
	{
	IndiceTools::toIJ(s, w, &i, &j); // s[0,W*H[ --> i[0,H[ j[0,W[

	// workPixel(&ptrDevPixels[s], i, j, t, domaineMath, &mandelbrotMath);
	// (i,j) domaine ecran dans N2
	// (x,y) domaine math dans R2

	double x;
	double y;
	domaineMath.toXY(i, j, &x, &y); // fill (x,y) from (i,j)

       // float t=variateurAnimation.get();

	mandelbrotMath->colorXY(&ptrDevPixel[s],i, j, t); // in [01]

	s += NB_THREAD;
	}

    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/**
 * i in [0,h[
 * j in [0,w[
 */
//__device__ void workPixel(uchar4* ptrColorIJ,int i, int j,float t, const DomaineMath& domaineMath,MandelbrotMath* ptrMandelbrotMath)
//    {
//    // (i,j) domaine ecran dans N2
//    // (x,y) domaine math dans R2
//
//    double x;
//    double y;
//    domaineMath.toXY(i, j, &x, &y); // fill (x,y) from (i,j)
//
//   // float t=variateurAnimation.get();
//
//    ptrMandelbrotMath->colorXY(ptrColorIJ,x, y, t); // in [01]
//    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

