#include <iostream>

#include "Device.h"
#include "Histogramme.h"
#include "DataCreator.h"

using std::cout;
using std::endl;

const int dataMax = 256;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Import			*|
 \*-------------------------------------*/

extern __global__ void histogram(int* ptrTabData, int tabSize, int *ptrDevResult);

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

Histogramme::Histogramme(const Grid& grid) :
{
	DataCreator dataCreator(dataMax);
	ptrTabData = dataCreator.getTabData();
	int n = dataCreator.getLenght();

	this->sizeOctetGM = sizeof(int) * n;
	this->sizeOctetSM = sizeof(int) * dataMax;

	Device::malloc(&ptrDevTabResult, sizeOctetSM);
	Device::memclear(ptrDevTabResult, sizeOctetSM);

	Device::malloc(&ptrDevTabData, sizeOctetGM);
	Device::memclear(ptrDevTabData, sizeOctetGM);

	Device::lastCudaError("Histogramme.cu Constructor");

	// Grid

	this->dg = grid.dg;
	this->db = grid.db;
}

Histogramme::~Histogramme(void)
{
	Device::free(ptrDevTabResult);
	Device::free(ptrDevTabData);
	Device::lastCudaError("Histogramme.cu Destructor");
}

int* Histogramme::run()
{
	Device::lastCudaError("Histogramme Run Begin");
	histogram<<<dg,db,sizeOctetResult>>>(ptrTabIn, tabSize, ptrTabOut); // asynchrone
	Device::lastCudaError("Histogramme Run End");

	HANDLE_ERROR(cudaMemcpy(ptrTabResult, ptrTabOut, sizeOctetResult ,cudaMemcpyDeviceToHost));

	return ptrTabResult;
}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

